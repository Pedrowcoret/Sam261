const express = require('express');
const authMiddleware = require('../middlewares/authMiddleware');
const SSHManager = require('../config/SSHManager');
const db = require('../config/database');

const router = express.Router();

// POST /api/wowza-control/start - Iniciar aplica√ß√£o Wowza
router.post('/start', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    // Buscar informa√ß√µes do usu√°rio
    const [userRows] = await db.execute(
      'SELECT usuario, email, codigo_servidor FROM streamings WHERE codigo_cliente = ? LIMIT 1',
      [userId]
    );

    if (userRows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    const userData = userRows[0];
    const userLogin = userData.usuario || userData.email.split('@')[0] || `user_${userId}`;
    const serverId = userData.codigo_servidor || 1;

    console.log(`‚ñ∂Ô∏è Iniciando aplica√ß√£o Wowza para usu√°rio: ${userLogin}`);

    // Comando simplificado para iniciar aplica√ß√£o (usando o m√©todo sugerido)
    const command = `cd /usr/local/WowzaMediaServer && export WOWZA_HOME=/usr/local/WowzaMediaServer && /usr/bin/java -cp "lib/*:bin" com.wowza.wms.jmx.JMXCommandLine -jmx "service:jmx:rmi://localhost:8084/jndi/rmi://localhost:8085/jmxrmi" -user admin -pass admin startAppInstance ${userLogin}`;

    // Executar comando via SSH
    const output = await SSHManager.executeCommand(serverId, command);

    console.log(`‚úÖ Aplica√ß√£o Wowza iniciada com sucesso para ${userLogin}`);
    console.log(`Output: ${output}`);

    res.json({
      success: true,
      message: `Aplica√ß√£o iniciada com sucesso para ${userLogin}`,
      output: output,
      user: userLogin
    });

  } catch (error) {
    console.error('‚ùå Erro ao iniciar aplica√ß√£o Wowza:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erro ao iniciar aplica√ß√£o Wowza'
    });
  }
});

// POST /api/wowza-control/stop - Parar aplica√ß√£o Wowza
router.post('/stop', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    // Buscar informa√ß√µes do usu√°rio
    const [userRows] = await db.execute(
      'SELECT usuario, email, codigo_servidor FROM streamings WHERE codigo_cliente = ? LIMIT 1',
      [userId]
    );

    if (userRows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    const userData = userRows[0];
    const userLogin = userData.usuario || userData.email.split('@')[0] || `user_${userId}`;
    const serverId = userData.codigo_servidor || 1;

    console.log(`‚èπÔ∏è Parando aplica√ß√£o Wowza para usu√°rio: ${userLogin}`);

    // Comando simplificado para parar aplica√ß√£o
    const command = `cd /usr/local/WowzaMediaServer && export WOWZA_HOME=/usr/local/WowzaMediaServer && /usr/bin/java -cp "lib/*:bin" com.wowza.wms.jmx.JMXCommandLine -jmx "service:jmx:rmi://localhost:8084/jndi/rmi://localhost:8085/jmxrmi" -user admin -pass admin shutdownAppInstance ${userLogin}`;

    // Executar comando via SSH
    const output = await SSHManager.executeCommand(serverId, command);

    console.log(`‚úÖ Aplica√ß√£o Wowza parada com sucesso para ${userLogin}`);
    console.log(`Output: ${output}`);

    res.json({
      success: true,
      message: `Aplica√ß√£o parada com sucesso para ${userLogin}`,
      output: output,
      user: userLogin
    });

  } catch (error) {
    console.error('‚ùå Erro ao parar aplica√ß√£o Wowza:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erro ao parar aplica√ß√£o Wowza'
    });
  }
});

// POST /api/wowza-control/restart - Reiniciar aplica√ß√£o Wowza
router.post('/restart', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    // Buscar informa√ß√µes do usu√°rio
    const [userRows] = await db.execute(
      'SELECT usuario, email, codigo_servidor FROM streamings WHERE codigo_cliente = ? LIMIT 1',
      [userId]
    );

    if (userRows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    const userData = userRows[0];
    const userLogin = userData.usuario || userData.email.split('@')[0] || `user_${userId}`;
    const serverId = userData.codigo_servidor || 1;

    console.log(`üîÑ Reiniciando aplica√ß√£o Wowza para usu√°rio: ${userLogin}`);

    // Primeiro, parar a aplica√ß√£o
    const stopCommand = `cd /usr/local/WowzaMediaServer && export WOWZA_HOME=/usr/local/WowzaMediaServer && /usr/bin/java -cp "lib/*:bin" com.wowza.wms.jmx.JMXCommandLine -jmx "service:jmx:rmi://localhost:8084/jndi/rmi://localhost:8085/jmxrmi" -user admin -pass admin shutdownAppInstance ${userLogin}`;

    console.log(`‚èπÔ∏è Parando aplica√ß√£o primeiro...`);
    await SSHManager.executeCommand(serverId, stopCommand);

    // Aguardar 2 segundos antes de iniciar novamente
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Depois, iniciar a aplica√ß√£o
    const startCommand = `cd /usr/local/WowzaMediaServer && export WOWZA_HOME=/usr/local/WowzaMediaServer && /usr/bin/java -cp "lib/*:bin" com.wowza.wms.jmx.JMXCommandLine -jmx "service:jmx:rmi://localhost:8084/jndi/rmi://localhost:8085/jmxrmi" -user admin -pass admin startAppInstance ${userLogin}`;

    console.log(`‚ñ∂Ô∏è Iniciando aplica√ß√£o novamente...`);
    const output = await SSHManager.executeCommand(serverId, startCommand);

    console.log(`‚úÖ Aplica√ß√£o Wowza reiniciada com sucesso para ${userLogin}`);
    console.log(`Output: ${output}`);

    res.json({
      success: true,
      message: `Aplica√ß√£o reiniciada com sucesso para ${userLogin}`,
      output: output,
      user: userLogin
    });

  } catch (error) {
    console.error('‚ùå Erro ao reiniciar aplica√ß√£o Wowza:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erro ao reiniciar aplica√ß√£o Wowza'
    });
  }
});

// GET /api/wowza-control/status - Verificar status da aplica√ß√£o
router.get('/status', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    // Buscar informa√ß√µes do usu√°rio
    const [userRows] = await db.execute(
      'SELECT usuario, email, codigo_servidor FROM streamings WHERE codigo_cliente = ? LIMIT 1',
      [userId]
    );

    if (userRows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Usu√°rio n√£o encontrado'
      });
    }

    const userData = userRows[0];
    const userLogin = userData.usuario || userData.email.split('@')[0] || `user_${userId}`;
    const serverId = userData.codigo_servidor || 1;

    // Comando para verificar status (lista todas as aplica√ß√µes)
    const command = `cd /usr/local/WowzaMediaServer && export WOWZA_HOME=/usr/local/WowzaMediaServer && /usr/bin/java -cp "lib/*:bin" com.wowza.wms.jmx.JMXCommandLine -jmx "service:jmx:rmi://localhost:8084/jndi/rmi://localhost:8085/jmxrmi" -user admin -pass admin getAppInstances`;

    const output = await SSHManager.executeCommand(serverId, command);

    // Verificar se a aplica√ß√£o do usu√°rio est√° na lista
    const outputStr = typeof output === 'string' ? output : (output?.stdout || '');
    const isRunning = outputStr.includes(userLogin);

    res.json({
      success: true,
      running: isRunning,
      user: userLogin,
      message: isRunning ? 'Aplica√ß√£o est√° rodando' : 'Aplica√ß√£o est√° parada'
    });

  } catch (error) {
    console.error('‚ùå Erro ao verificar status da aplica√ß√£o:', error);
    res.json({
      success: false,
      running: false,
      error: error.message || 'Erro ao verificar status'
    });
  }
});

module.exports = router;
